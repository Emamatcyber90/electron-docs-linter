[
  {
    "name": "clipboard",
    "mainProcess": true,
    "slug": "clipboard",
    "websiteUrl": "http://electron.atom.io/docs/api/clipboard",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/clipboard.md",
    "type": "Object",
    "rendererProcess": true,
    "description": "Perform copy and paste operations on the system clipboard."
  },
  {
    "name": "crashReporter",
    "mainProcess": true,
    "slug": "crash-reporter",
    "websiteUrl": "http://electron.atom.io/docs/api/crash-reporter",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/crash-reporter.md",
    "type": "Object",
    "rendererProcess": true,
    "description": "Submit crash reports to a remote server."
  },
  {
    "name": "nativeImage",
    "mainProcess": true,
    "slug": "native-image",
    "websiteUrl": "http://electron.atom.io/docs/api/native-image",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/native-image.md",
    "type": "Object",
    "rendererProcess": true,
    "description": "Create tray, dock, and application icons using PNG or JPG files.",
    "instanceMethods": [
      {
        "name": "toPng",
        "signature": "()"
      },
      {
        "name": "toJpeg",
        "signature": "(quality)"
      },
      {
        "name": "toDataURL",
        "signature": "()"
      },
      {
        "name": "getNativeHandle",
        "signature": "()"
      },
      {
        "name": "isEmpty",
        "signature": "()"
      },
      {
        "name": "getSize",
        "signature": "()"
      },
      {
        "name": "setTemplateImage",
        "signature": "(option)"
      },
      {
        "name": "isTemplateImage",
        "signature": "()"
      }
    ]
  },
  {
    "name": "shell",
    "mainProcess": true,
    "slug": "shell",
    "websiteUrl": "http://electron.atom.io/docs/api/shell",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/shell.md",
    "type": "Object",
    "rendererProcess": true,
    "description": "Manage files and URLs using their default applications."
  },
  {
    "name": "app",
    "mainProcess": true,
    "slug": "app",
    "websiteUrl": "http://electron.atom.io/docs/api/app",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/app.md",
    "type": "Object",
    "description": "Control your application's event lifecycle.",
    "events": [
      {
        "name": "will-finish-launching",
        "description": "Emitted when the application has finished basic startup. On Windows and Linux, the will-finish-launching event is the same as the ready event; on OS X, this event represents the applicationWillFinishLaunching notification of NSApplication. You would usually set up listeners for the open-file and open-url events here, and start the crash reporter and auto updater. In most cases, you should just do everything in the ready event handler."
      },
      {
        "name": "ready",
        "description": "Emitted when Electron has finished initialization."
      },
      {
        "name": "window-all-closed",
        "description": "Emitted when all windows have been closed. If you do not subscribe to this event and all windows are closed, the default behavior is to quit the app; however, if you subscribe, you control whether the app quits or not. If the user pressed Cmd + Q, or the developer called app.quit(), Electron will first try to close all the windows and then emit the will-quit event, and in this case the window-all-closed event would not be emitted."
      },
      {
        "name": "before-quit",
        "description": "Emitted before the application starts closing its windows. Calling event.preventDefault() will prevent the default behaviour, which is terminating the application.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          }
        ]
      },
      {
        "name": "will-quit",
        "description": "Emitted when all windows have been closed and the application will quit. Calling event.preventDefault() will prevent the default behaviour, which is terminating the application. See the description of the window-all-closed event for the differences between the will-quit and window-all-closed events.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          }
        ]
      },
      {
        "name": "quit",
        "description": "Emitted when the application is quitting.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "exitCode",
            "type": "Integer"
          }
        ]
      },
      {
        "name": "open-file",
        "description": "Emitted when the user wants to open a file with the application. The open-file event is usually emitted when the application is already open and the OS wants to reuse the application to open the file. open-file is also emitted when a file is dropped onto the dock and the application is not yet running. Make sure to listen for the open-file event very early in your application startup to handle this case (even before the ready event is emitted). You should call event.preventDefault() if you want to handle this event. On Windows, you have to parse process.argv (in the main process) to get the filepath.",
        "platforms": [
          "OS X"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "path",
            "type": "String"
          }
        ]
      },
      {
        "name": "open-url",
        "description": "Emitted when the user wants to open a URL with the application. The URL scheme must be registered to be opened by your application. You should call event.preventDefault() if you want to handle this event.",
        "platforms": [
          "OS X"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "String"
          }
        ]
      },
      {
        "name": "activate",
        "description": "Emitted when the application is activated, which usually happens when the user clicks on the application's dock icon.",
        "platforms": [
          "OS X"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "hasVisibleWindows",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "continue-activity",
        "description": "Emitted during Handoff when an activity from a different device wants to be resumed. You should call event.preventDefault() if you want to handle this event. A user activity can be continued only in an app that has the same developer Team ID as the activity's source app and that supports the activity's type. Supported activity types are specified in the app's Info.plist under the NSUserActivityTypes key.",
        "platforms": [
          "OS X"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "type",
            "type": "String",
            "description": "A string identifying the activity. Maps to"
          },
          {
            "name": "userInfo",
            "type": "Object",
            "description": "Contains app-specific state stored by the activity on"
          }
        ]
      },
      {
        "name": "browser-window-blur",
        "description": "Emitted when a browserWindow gets blurred.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "window",
            "type": "BrowserWindow"
          }
        ]
      },
      {
        "name": "browser-window-focus",
        "description": "Emitted when a browserWindow gets focused.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "window",
            "type": "BrowserWindow"
          }
        ]
      },
      {
        "name": "browser-window-created",
        "description": "Emitted when a new browserWindow is created.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "window",
            "type": "BrowserWindow"
          }
        ]
      },
      {
        "name": "web-contents-created",
        "description": "Emitted when a new webContents is created.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "webContents",
            "type": "WebContents"
          }
        ]
      },
      {
        "name": "certificate-error",
        "description": "Emitted when failed to verify the certificate for url, to trust the certificate you should prevent the default behavior with event.preventDefault() and call callback(true).",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "webContents",
            "type": "<a href=\"web-contents.md\">WebContents</a>"
          },
          {
            "name": "url",
            "type": "URL"
          },
          {
            "name": "error",
            "type": "String",
            "description": "The error code"
          },
          {
            "name": "certificate",
            "type": "Object",
            "properties": [
              {
                "name": "data",
                "type": "Buffer - PEM encoded data"
              },
              {
                "name": "issuerName",
                "type": "String"
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "select-client-certificate",
        "description": "Emitted when a client certificate is requested. The url corresponds to the navigation entry requesting the client certificate and callback needs to be called with an entry filtered from the list. Using event.preventDefault() prevents the application from using the first certificate from the store.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "webContents",
            "type": "<a href=\"web-contents.md\">WebContents</a>"
          },
          {
            "name": "url",
            "type": "URL"
          },
          {
            "name": "certificateList",
            "type": "[Objects]",
            "properties": [
              {
                "name": "data",
                "type": "Buffer - PEM encoded data"
              },
              {
                "name": "issuerName",
                "type": "String - Issuer&apos;s Common Name"
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "login",
        "description": "Emitted when webContents wants to do basic auth. The default behavior is to cancel all authentications, to override this you should prevent the default behavior with event.preventDefault() and call callback(username, password) with the credentials.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "webContents",
            "type": "<a href=\"web-contents.md\">WebContents</a>"
          },
          {
            "name": "request",
            "type": "Object",
            "properties": [
              {
                "name": "method",
                "type": "String"
              },
              {
                "name": "url",
                "type": "URL"
              },
              {
                "name": "referrer",
                "type": "URL"
              }
            ]
          },
          {
            "name": "authInfo",
            "type": "Object",
            "properties": [
              {
                "name": "isProxy",
                "type": "Boolean"
              },
              {
                "name": "scheme",
                "type": "String"
              },
              {
                "name": "host",
                "type": "String"
              },
              {
                "name": "port",
                "type": "Integer"
              },
              {
                "name": "realm",
                "type": "String"
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "gpu-process-crashed",
        "description": "Emitted when the gpu process crashes."
      }
    ]
  },
  {
    "name": "autoUpdater",
    "mainProcess": true,
    "slug": "auto-updater",
    "websiteUrl": "http://electron.atom.io/docs/api/auto-updater",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/auto-updater.md",
    "type": "Object",
    "description": "Enable apps to automatically update themselves.",
    "events": [
      {
        "name": "error",
        "description": "Emitted when there is an error while updating.",
        "returns": [
          {
            "name": "error",
            "type": "Error"
          }
        ]
      },
      {
        "name": "checking-for-update",
        "description": "Emitted when checking if an update has started."
      },
      {
        "name": "update-available",
        "description": "Emitted when there is an available update. The update is downloaded automatically."
      },
      {
        "name": "update-not-available",
        "description": "Emitted when there is no available update."
      },
      {
        "name": "update-downloaded",
        "description": "Emitted when an update has been downloaded. On Windows only releaseName is available.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "releaseNotes",
            "type": "String"
          },
          {
            "name": "releaseName",
            "type": "String"
          },
          {
            "name": "releaseDate",
            "type": "Date"
          },
          {
            "name": "updateURL",
            "type": "String"
          }
        ]
      }
    ]
  },
  {
    "name": "BrowserWindow",
    "mainProcess": true,
    "slug": "browser-window",
    "websiteUrl": "http://electron.atom.io/docs/api/browser-window",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/browser-window.md",
    "type": "Class",
    "description": "Create and control browser windows.",
    "instanceMethods": [
      {
        "name": "destroy",
        "signature": "()"
      },
      {
        "name": "close",
        "signature": "()"
      },
      {
        "name": "focus",
        "signature": "()"
      },
      {
        "name": "blur",
        "signature": "()"
      },
      {
        "name": "isFocused",
        "signature": "()"
      },
      {
        "name": "show",
        "signature": "()"
      },
      {
        "name": "showInactive",
        "signature": "()"
      },
      {
        "name": "hide",
        "signature": "()"
      },
      {
        "name": "isVisible",
        "signature": "()"
      },
      {
        "name": "maximize",
        "signature": "()"
      },
      {
        "name": "unmaximize",
        "signature": "()"
      },
      {
        "name": "isMaximized",
        "signature": "()"
      },
      {
        "name": "minimize",
        "signature": "()"
      },
      {
        "name": "restore",
        "signature": "()"
      },
      {
        "name": "isMinimized",
        "signature": "()"
      },
      {
        "name": "setFullScreen",
        "signature": "(flag)"
      },
      {
        "name": "isFullScreen",
        "signature": "()"
      },
      {
        "name": "setAspectRatio",
        "signature": "(aspectRatio[, extraSize])"
      },
      {
        "name": "setBounds",
        "signature": "(options[, animate])"
      },
      {
        "name": "getBounds",
        "signature": "()"
      },
      {
        "name": "setSize",
        "signature": "(width, height[, animate])"
      },
      {
        "name": "getSize",
        "signature": "()"
      },
      {
        "name": "setContentSize",
        "signature": "(width, height[, animate])"
      },
      {
        "name": "getContentSize",
        "signature": "()"
      },
      {
        "name": "setMinimumSize",
        "signature": "(width, height)"
      },
      {
        "name": "getMinimumSize",
        "signature": "()"
      },
      {
        "name": "setMaximumSize",
        "signature": "(width, height)"
      },
      {
        "name": "getMaximumSize",
        "signature": "()"
      },
      {
        "name": "setResizable",
        "signature": "(resizable)"
      },
      {
        "name": "isResizable",
        "signature": "()"
      },
      {
        "name": "setMovable",
        "signature": "(movable)"
      },
      {
        "name": "isMovable",
        "signature": "()"
      },
      {
        "name": "setMinimizable",
        "signature": "(minimizable)"
      },
      {
        "name": "isMinimizable",
        "signature": "()"
      },
      {
        "name": "setMaximizable",
        "signature": "(maximizable)"
      },
      {
        "name": "isMaximizable",
        "signature": "()"
      },
      {
        "name": "setFullScreenable",
        "signature": "(fullscreenable)"
      },
      {
        "name": "isFullScreenable",
        "signature": "()"
      },
      {
        "name": "setClosable",
        "signature": "(closable)"
      },
      {
        "name": "isClosable",
        "signature": "()"
      },
      {
        "name": "setAlwaysOnTop",
        "signature": "(flag)"
      },
      {
        "name": "isAlwaysOnTop",
        "signature": "()"
      },
      {
        "name": "center",
        "signature": "()"
      },
      {
        "name": "setPosition",
        "signature": "(x, y[, animate])"
      },
      {
        "name": "getPosition",
        "signature": "()"
      },
      {
        "name": "setTitle",
        "signature": "(title)"
      },
      {
        "name": "getTitle",
        "signature": "()"
      },
      {
        "name": "setSheetOffset",
        "signature": "(offsetY[, offsetX])"
      },
      {
        "name": "flashFrame",
        "signature": "(flag)"
      },
      {
        "name": "setSkipTaskbar",
        "signature": "(skip)"
      },
      {
        "name": "setKiosk",
        "signature": "(flag)"
      },
      {
        "name": "isKiosk",
        "signature": "()"
      },
      {
        "name": "getNativeWindowHandle",
        "signature": "()"
      },
      {
        "name": "hookWindowMessage",
        "signature": "(message, callback)"
      },
      {
        "name": "isWindowMessageHooked",
        "signature": "(message)"
      },
      {
        "name": "unhookWindowMessage",
        "signature": "(message)"
      },
      {
        "name": "unhookAllWindowMessages",
        "signature": "()"
      },
      {
        "name": "setRepresentedFilename",
        "signature": "(filename)"
      },
      {
        "name": "getRepresentedFilename",
        "signature": "()"
      },
      {
        "name": "setDocumentEdited",
        "signature": "(edited)"
      },
      {
        "name": "isDocumentEdited",
        "signature": "()"
      },
      {
        "name": "focusOnWebView",
        "signature": "()"
      },
      {
        "name": "blurWebView",
        "signature": "()"
      },
      {
        "name": "capturePage",
        "signature": "([rect, ]callback)"
      },
      {
        "name": "loadURL",
        "signature": "(url[, options])"
      },
      {
        "name": "reload",
        "signature": "()"
      },
      {
        "name": "setMenu",
        "signature": "(menu)"
      },
      {
        "name": "setProgressBar",
        "signature": "(progress)"
      },
      {
        "name": "setOverlayIcon",
        "signature": "(overlay, description)"
      },
      {
        "name": "setHasShadow",
        "signature": "(hasShadow)"
      },
      {
        "name": "hasShadow",
        "signature": "()"
      },
      {
        "name": "setThumbarButtons",
        "signature": "(buttons)"
      },
      {
        "name": "showDefinitionForSelection",
        "signature": "()"
      },
      {
        "name": "setIcon",
        "signature": "(icon)"
      },
      {
        "name": "setAutoHideMenuBar",
        "signature": "(hide)"
      },
      {
        "name": "isMenuBarAutoHide",
        "signature": "()"
      },
      {
        "name": "setMenuBarVisibility",
        "signature": "(visible)"
      },
      {
        "name": "isMenuBarVisible",
        "signature": "()"
      },
      {
        "name": "setVisibleOnAllWorkspaces",
        "signature": "(visible)"
      },
      {
        "name": "isVisibleOnAllWorkspaces",
        "signature": "()"
      },
      {
        "name": "setIgnoreMouseEvents",
        "signature": "(ignore)"
      },
      {
        "name": "setFocusable",
        "signature": "(focusable)"
      }
    ],
    "events": [
      {
        "name": "page-title-updated",
        "description": "Emitted when the document changed its title, calling event.preventDefault() would prevent the native window's title to change.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          }
        ]
      },
      {
        "name": "close",
        "description": "Emitted when the window is going to be closed. It's emitted before the beforeunload and unload event of the DOM. Calling event.preventDefault() will cancel the close. Usually you would want to use the beforeunload handler to decide whether the window should be closed, which will also be called when the window is reloaded. In Electron, returning any value other than undefined would cancel the close. For example:",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          }
        ]
      },
      {
        "name": "closed",
        "description": "Emitted when the window is closed. After you have received this event you should remove the reference to the window and avoid using it anymore."
      },
      {
        "name": "unresponsive",
        "description": "Emitted when the web page becomes unresponsive."
      },
      {
        "name": "responsive",
        "description": "Emitted when the unresponsive web page becomes responsive again."
      },
      {
        "name": "blur",
        "description": "Emitted when the window loses focus."
      },
      {
        "name": "focus",
        "description": "Emitted when the window gains focus."
      },
      {
        "name": "show",
        "description": "Emitted when the window is shown."
      },
      {
        "name": "hide",
        "description": "Emitted when the window is hidden."
      },
      {
        "name": "ready-to-show",
        "description": "Emitted when the web page has been rendered and window can be displayed without visual flash."
      },
      {
        "name": "maximize",
        "description": "Emitted when window is maximized."
      },
      {
        "name": "unmaximize",
        "description": "Emitted when the window exits from maximized state."
      },
      {
        "name": "minimize",
        "description": "Emitted when the window is minimized."
      },
      {
        "name": "restore",
        "description": "Emitted when the window is restored from minimized state."
      },
      {
        "name": "resize",
        "description": "Emitted when the window is getting resized."
      },
      {
        "name": "move",
        "description": "Emitted when the window is getting moved to a new position. Note: On OS X this event is just an alias of moved."
      },
      {
        "name": "moved",
        "description": "Emitted once when the window is moved to a new position.",
        "platforms": [
          "OS X"
        ]
      },
      {
        "name": "enter-full-screen",
        "description": "Emitted when the window enters full screen state."
      },
      {
        "name": "leave-full-screen",
        "description": "Emitted when the window leaves full screen state."
      },
      {
        "name": "enter-html-full-screen",
        "description": "Emitted when the window enters full screen state triggered by html api."
      },
      {
        "name": "leave-html-full-screen",
        "description": "Emitted when the window leaves full screen state triggered by html api."
      },
      {
        "name": "app-command",
        "description": "Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well as the \"Back\" button built into some mice on Windows. Commands are lowercased with underscores replaced with hyphens and the APPCOMMAND_ prefix stripped off. e.g. APPCOMMAND_BROWSER_BACKWARD is emitted as browser-backward.",
        "platforms": [
          "Windows"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "command",
            "type": "String"
          }
        ]
      },
      {
        "name": "scroll-touch-begin",
        "description": "Emitted when scroll wheel event phase has begun.",
        "platforms": [
          "OS X"
        ]
      },
      {
        "name": "scroll-touch-end",
        "description": "Emitted when scroll wheel event phase has ended.",
        "platforms": [
          "OS X"
        ]
      },
      {
        "name": "swipe",
        "description": "Emitted on 3-finger swipe. Possible directions are up, right, down, left.",
        "platforms": [
          "OS X"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "direction",
            "type": "String"
          }
        ]
      }
    ]
  },
  {
    "name": "contentTracing",
    "mainProcess": true,
    "slug": "content-tracing",
    "websiteUrl": "http://electron.atom.io/docs/api/content-tracing",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/content-tracing.md",
    "type": "Object",
    "description": "Collect tracing data from Chromium's content module for finding performance\nbottlenecks and slow operations."
  },
  {
    "name": "dialog",
    "mainProcess": true,
    "slug": "dialog",
    "websiteUrl": "http://electron.atom.io/docs/api/dialog",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/dialog.md",
    "type": "Object",
    "description": "Display native system dialogs for opening and saving files, alerting, etc."
  },
  {
    "name": "ipcMain",
    "mainProcess": true,
    "slug": "ipc-main",
    "websiteUrl": "http://electron.atom.io/docs/api/ipc-main",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/ipc-main.md",
    "type": "Object",
    "description": "Communicate asynchronously from the main process to renderer processes."
  },
  {
    "name": "globalShortcut",
    "mainProcess": true,
    "slug": "global-shortcut",
    "websiteUrl": "http://electron.atom.io/docs/api/global-shortcut",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/global-shortcut.md",
    "type": "Object",
    "description": "Detect keyboard events when the application does not have keyboard focus."
  },
  {
    "name": "Menu",
    "mainProcess": true,
    "slug": "menu",
    "websiteUrl": "http://electron.atom.io/docs/api/menu",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/menu.md",
    "type": "Class",
    "description": "Create native application menus and context menus.",
    "instanceMethods": [
      {
        "name": "popup",
        "signature": "([browserWindow, x, y, positioningItem])"
      },
      {
        "name": "append",
        "signature": "(menuItem)"
      },
      {
        "name": "insert",
        "signature": "(pos, menuItem)"
      }
    ]
  },
  {
    "name": "MenuItem",
    "mainProcess": true,
    "slug": "menu-item",
    "websiteUrl": "http://electron.atom.io/docs/api/menu-item",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/menu-item.md",
    "type": "Class",
    "description": "Add items to native application menus and context menus."
  },
  {
    "name": "powerMonitor",
    "mainProcess": true,
    "slug": "power-monitor",
    "websiteUrl": "http://electron.atom.io/docs/api/power-monitor",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/power-monitor.md",
    "type": "Object",
    "description": "Monitor power state changes.",
    "events": [
      {
        "name": "suspend",
        "description": "Emitted when the system is suspending."
      },
      {
        "name": "resume",
        "description": "Emitted when system is resuming."
      },
      {
        "name": "on-ac",
        "description": "Emitted when the system changes to AC power.",
        "platforms": [
          "Windows"
        ]
      },
      {
        "name": "on-battery",
        "description": "Emitted when system changes to battery power.",
        "platforms": [
          "Windows"
        ]
      }
    ]
  },
  {
    "name": "powerSaveBlocker",
    "mainProcess": true,
    "slug": "power-save-blocker",
    "websiteUrl": "http://electron.atom.io/docs/api/power-save-blocker",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/power-save-blocker.md",
    "type": "Object",
    "description": "Block the system from entering low-power (sleep) mode."
  },
  {
    "name": "protocol",
    "mainProcess": true,
    "slug": "protocol",
    "websiteUrl": "http://electron.atom.io/docs/api/protocol",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/protocol.md",
    "type": "Object",
    "description": "Register a custom protocol and intercept existing protocol requests."
  },
  {
    "name": "screen",
    "mainProcess": true,
    "slug": "screen",
    "websiteUrl": "http://electron.atom.io/docs/api/screen",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/screen.md",
    "type": "Object",
    "rendererProcess": true,
    "description": "Retrieve information about screen size, displays, cursor position, etc.",
    "events": [
      {
        "name": "display-added",
        "description": "Emitted when newDisplay has been added.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "newDisplay",
            "type": "Object"
          }
        ]
      },
      {
        "name": "display-removed",
        "description": "Emitted when oldDisplay has been removed.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "oldDisplay",
            "type": "Object"
          }
        ]
      },
      {
        "name": "display-metrics-changed",
        "description": "Emitted when one or more metrics change in a display. The changedMetrics is an array of strings that describe the changes. Possible changes are bounds, workArea, scaleFactor and rotation.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "display",
            "type": "Object"
          },
          {
            "name": "changedMetrics",
            "type": "Array"
          }
        ]
      }
    ]
  },
  {
    "name": "session",
    "mainProcess": true,
    "slug": "session",
    "websiteUrl": "http://electron.atom.io/docs/api/session",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/session.md",
    "type": "Object",
    "description": "Manage browser sessions, cookies, cache, proxy settings, etc.",
    "instanceMethods": [
      {
        "name": "resolveProxy",
        "signature": "(url, callback)"
      }
    ]
  },
  {
    "name": "systemPreferences",
    "mainProcess": true,
    "slug": "system-preferences",
    "websiteUrl": "http://electron.atom.io/docs/api/system-preferences",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/system-preferences.md",
    "type": "Object",
    "description": "Get system preferences."
  },
  {
    "name": "Tray",
    "mainProcess": true,
    "slug": "tray",
    "websiteUrl": "http://electron.atom.io/docs/api/tray",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/tray.md",
    "type": "Class",
    "description": "Add icons and context menus to the system's notification area.",
    "events": [
      {
        "name": "click",
        "description": "Emitted when the tray icon is clicked. Note: The bounds payload is only implemented on OS X and Windows.",
        "returns": [
          {
            "name": "event",
            "type": "Event",
            "properties": [
              {
                "name": "altKey",
                "type": "Boolean"
              },
              {
                "name": "shiftKey",
                "type": "Boolean"
              },
              {
                "name": "ctrlKey",
                "type": "Boolean"
              },
              {
                "name": "metaKey",
                "type": "Boolean"
              }
            ]
          },
          {
            "name": "bounds",
            "type": "Object",
            "description": "the bounds of tray icon.",
            "properties": [
              {
                "name": "x",
                "type": "Integer"
              },
              {
                "name": "y",
                "type": "Integer"
              },
              {
                "name": "width",
                "type": "Integer"
              },
              {
                "name": "height",
                "type": "Integer"
              }
            ]
          }
        ]
      },
      {
        "name": "right-click",
        "description": "Emitted when the tray icon is right clicked.",
        "platforms": [
          "OS X",
          "Windows"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event",
            "properties": [
              {
                "name": "altKey",
                "type": "Boolean"
              },
              {
                "name": "shiftKey",
                "type": "Boolean"
              },
              {
                "name": "ctrlKey",
                "type": "Boolean"
              },
              {
                "name": "metaKey",
                "type": "Boolean"
              }
            ]
          },
          {
            "name": "bounds",
            "type": "Object",
            "description": "the bounds of tray icon.",
            "properties": [
              {
                "name": "x",
                "type": "Integer"
              },
              {
                "name": "y",
                "type": "Integer"
              },
              {
                "name": "width",
                "type": "Integer"
              },
              {
                "name": "height",
                "type": "Integer"
              }
            ]
          }
        ]
      },
      {
        "name": "double-click",
        "description": "Emitted when the tray icon is double clicked.",
        "platforms": [
          "OS X",
          "Windows"
        ],
        "returns": [
          {
            "name": "event",
            "type": "Event",
            "properties": [
              {
                "name": "altKey",
                "type": "Boolean"
              },
              {
                "name": "shiftKey",
                "type": "Boolean"
              },
              {
                "name": "ctrlKey",
                "type": "Boolean"
              },
              {
                "name": "metaKey",
                "type": "Boolean"
              }
            ]
          },
          {
            "name": "bounds",
            "type": "Object",
            "description": "the bounds of tray icon",
            "properties": [
              {
                "name": "x",
                "type": "Integer"
              },
              {
                "name": "y",
                "type": "Integer"
              },
              {
                "name": "width",
                "type": "Integer"
              },
              {
                "name": "height",
                "type": "Integer"
              }
            ]
          }
        ]
      },
      {
        "name": "balloon-show",
        "description": "Emitted when the tray balloon shows.",
        "platforms": [
          "Windows"
        ]
      },
      {
        "name": "balloon-click",
        "description": "Emitted when the tray balloon is clicked.",
        "platforms": [
          "Windows"
        ]
      },
      {
        "name": "balloon-closed",
        "description": "Emitted when the tray balloon is closed because of timeout or user manually closes it.",
        "platforms": [
          "Windows"
        ]
      },
      {
        "name": "drop",
        "description": "Emitted when any dragged items are dropped on the tray icon.",
        "platforms": [
          "OS X"
        ]
      },
      {
        "name": "drop-files",
        "description": "Emitted when dragged files are dropped in the tray icon.",
        "platforms": [
          "OS X"
        ],
        "returns": [
          {
            "name": "files",
            "type": "Array",
            "description": "the file path of dropped files."
          }
        ]
      },
      {
        "name": "drag-enter",
        "description": "Emitted when a drag operation enters the tray icon.",
        "platforms": [
          "OS X"
        ]
      },
      {
        "name": "drag-leave",
        "description": "Emitted when a drag operation exits the tray icon.",
        "platforms": [
          "OS X"
        ]
      },
      {
        "name": "drag-end",
        "description": "Emitted when a drag operation ends on the tray or ends at another location.",
        "platforms": [
          "OS X"
        ]
      }
    ]
  },
  {
    "name": "webContents",
    "mainProcess": true,
    "slug": "web-contents",
    "websiteUrl": "http://electron.atom.io/docs/api/web-contents",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/web-contents.md",
    "type": "Object",
    "description": "Render and control web pages.",
    "instanceMethods": [
      {
        "name": "loadURL",
        "signature": "(url[, options])"
      },
      {
        "name": "downloadURL",
        "signature": "(url)"
      },
      {
        "name": "getURL",
        "signature": "()"
      },
      {
        "name": "getTitle",
        "signature": "()"
      },
      {
        "name": "isLoading",
        "signature": "()"
      },
      {
        "name": "isLoadingMainFrame",
        "signature": "()"
      },
      {
        "name": "isWaitingForResponse",
        "signature": "()"
      },
      {
        "name": "stop",
        "signature": "()"
      },
      {
        "name": "reload",
        "signature": "()"
      },
      {
        "name": "reloadIgnoringCache",
        "signature": "()"
      },
      {
        "name": "canGoBack",
        "signature": "()"
      },
      {
        "name": "canGoForward",
        "signature": "()"
      },
      {
        "name": "canGoToOffset",
        "signature": "(offset)"
      },
      {
        "name": "clearHistory",
        "signature": "()"
      },
      {
        "name": "goBack",
        "signature": "()"
      },
      {
        "name": "goForward",
        "signature": "()"
      },
      {
        "name": "goToIndex",
        "signature": "(index)"
      },
      {
        "name": "goToOffset",
        "signature": "(offset)"
      },
      {
        "name": "isCrashed",
        "signature": "()"
      },
      {
        "name": "setUserAgent",
        "signature": "(userAgent)"
      },
      {
        "name": "getUserAgent",
        "signature": "()"
      },
      {
        "name": "insertCSS",
        "signature": "(css)"
      },
      {
        "name": "executeJavaScript",
        "signature": "(code[, userGesture, callback])"
      },
      {
        "name": "setAudioMuted",
        "signature": "(muted)"
      },
      {
        "name": "isAudioMuted",
        "signature": "()"
      },
      {
        "name": "undo",
        "signature": "()"
      },
      {
        "name": "redo",
        "signature": "()"
      },
      {
        "name": "cut",
        "signature": "()"
      },
      {
        "name": "copy",
        "signature": "()"
      },
      {
        "name": "paste",
        "signature": "()"
      },
      {
        "name": "pasteAndMatchStyle",
        "signature": "()"
      },
      {
        "name": "delete",
        "signature": "()"
      },
      {
        "name": "selectAll",
        "signature": "()"
      },
      {
        "name": "unselect",
        "signature": "()"
      },
      {
        "name": "replace",
        "signature": "(text)"
      },
      {
        "name": "replaceMisspelling",
        "signature": "(text)"
      },
      {
        "name": "insertText",
        "signature": "(text)"
      },
      {
        "name": "findInPage",
        "signature": "(text[, options])"
      },
      {
        "name": "stopFindInPage",
        "signature": "(action)"
      },
      {
        "name": "hasServiceWorker",
        "signature": "(callback)"
      },
      {
        "name": "unregisterServiceWorker",
        "signature": "(callback)"
      },
      {
        "name": "print",
        "signature": "([options])"
      },
      {
        "name": "printToPDF",
        "signature": "(options, callback)"
      },
      {
        "name": "addWorkSpace",
        "signature": "(path)"
      },
      {
        "name": "removeWorkSpace",
        "signature": "(path)"
      },
      {
        "name": "openDevTools",
        "signature": "([options])"
      },
      {
        "name": "closeDevTools",
        "signature": "()"
      },
      {
        "name": "isDevToolsOpened",
        "signature": "()"
      },
      {
        "name": "isDevToolsFocused",
        "signature": "()"
      },
      {
        "name": "toggleDevTools",
        "signature": "()"
      },
      {
        "name": "inspectElement",
        "signature": "(x, y)"
      },
      {
        "name": "inspectServiceWorker",
        "signature": "()"
      },
      {
        "name": "send",
        "signature": "(channel[, arg1][, arg2][, ...])"
      },
      {
        "name": "enableDeviceEmulation",
        "signature": "(parameters)"
      },
      {
        "name": "disableDeviceEmulation",
        "signature": "()"
      },
      {
        "name": "sendInputEvent",
        "signature": "(event)"
      },
      {
        "name": "beginFrameSubscription",
        "signature": "(callback)"
      },
      {
        "name": "endFrameSubscription",
        "signature": "()"
      },
      {
        "name": "savePage",
        "signature": "(fullPath, saveType, callback)"
      },
      {
        "name": "showDefinitionForSelection",
        "signature": "()"
      }
    ],
    "events": [
      {
        "name": "did-finish-load",
        "description": "Emitted when the navigation is done, i.e. the spinner of the tab has stopped spinning, and the onload event was dispatched."
      },
      {
        "name": "did-fail-load",
        "description": "This event is like did-finish-load but emitted when the load failed or was cancelled, e.g. window.stop() is invoked. The full list of error codes and their meaning is available here. Note that redirect responses will emit errorCode -3; you may want to ignore that error explicitly.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "errorCode",
            "type": "Integer"
          },
          {
            "name": "errorDescription",
            "type": "String"
          },
          {
            "name": "validatedURL",
            "type": "String"
          },
          {
            "name": "isMainFrame",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "did-frame-finish-load",
        "description": "Emitted when a frame has done navigation.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "isMainFrame",
            "type": "Boolean"
          }
        ]
      },
      {
        "name": "did-start-loading",
        "description": "Corresponds to the points in time when the spinner of the tab started spinning."
      },
      {
        "name": "did-stop-loading",
        "description": "Corresponds to the points in time when the spinner of the tab stopped spinning."
      },
      {
        "name": "did-get-response-details",
        "description": "Emitted when details regarding a requested resource are available. status indicates the socket connection to download the resource.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "status",
            "type": "Boolean"
          },
          {
            "name": "newURL",
            "type": "String"
          },
          {
            "name": "originalURL",
            "type": "String"
          },
          {
            "name": "httpResponseCode",
            "type": "Integer"
          },
          {
            "name": "requestMethod",
            "type": "String"
          },
          {
            "name": "referrer",
            "type": "String"
          },
          {
            "name": "headers",
            "type": "Object"
          },
          {
            "name": "resourceType",
            "type": "String"
          }
        ]
      },
      {
        "name": "did-get-redirect-request",
        "description": "Emitted when a redirect is received while requesting a resource.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "oldURL",
            "type": "String"
          },
          {
            "name": "newURL",
            "type": "String"
          },
          {
            "name": "isMainFrame",
            "type": "Boolean"
          },
          {
            "name": "httpResponseCode",
            "type": "Integer"
          },
          {
            "name": "requestMethod",
            "type": "String"
          },
          {
            "name": "referrer",
            "type": "String"
          },
          {
            "name": "headers",
            "type": "Object"
          }
        ]
      },
      {
        "name": "dom-ready",
        "description": "Emitted when the document in the given frame is loaded.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          }
        ]
      },
      {
        "name": "page-favicon-updated",
        "description": "Emitted when page receives favicon urls.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "favicons",
            "type": "Array",
            "description": "Array of URLs"
          }
        ]
      },
      {
        "name": "new-window",
        "description": "Emitted when the page requests to open a new window for a url. It could be requested by window.open or an external link like <a target='_blank'>. By default a new BrowserWindow will be created for the url. Calling event.preventDefault() will prevent creating new windows.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "String"
          },
          {
            "name": "frameName",
            "type": "String"
          },
          {
            "name": "disposition",
            "type": "String",
            "description": "Can be <code>default</code>, <code>foreground-tab</code>, <code>background-tab</code>,"
          },
          {
            "name": "options",
            "type": "Object",
            "description": "The options which will be used for creating the new"
          }
        ]
      },
      {
        "name": "will-navigate",
        "description": "Emitted when a user or the page wants to start navigation. It can happen when the window.location object is changed or a user clicks a link in the page. This event will not emit when the navigation is started programmatically with APIs like webContents.loadURL and webContents.back. It is also not emitted for in-page navigations, such as clicking anchor links or updating the window.location.hash. Use did-navigate-in-page event for this purpose. Calling event.preventDefault() will prevent the navigation.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "String"
          }
        ]
      },
      {
        "name": "did-navigate",
        "description": "Emitted when a navigation is done. This event is not emitted for in-page navigations, such as clicking anchor links or updating the window.location.hash. Use did-navigate-in-page event for this purpose.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "String"
          }
        ]
      },
      {
        "name": "did-navigate-in-page",
        "description": "Emitted when an in-page navigation happened. When in-page navigation happens, the page URL changes but does not cause navigation outside of the page. Examples of this occurring are when anchor links are clicked or when the DOM hashchange event is triggered.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "String"
          }
        ]
      },
      {
        "name": "crashed",
        "description": "Emitted when the renderer process has crashed."
      },
      {
        "name": "plugin-crashed",
        "description": "Emitted when a plugin process has crashed.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "name",
            "type": "String"
          },
          {
            "name": "version",
            "type": "String"
          }
        ]
      },
      {
        "name": "destroyed",
        "description": "Emitted when webContents is destroyed."
      },
      {
        "name": "devtools-opened",
        "description": "Emitted when DevTools is opened."
      },
      {
        "name": "devtools-closed",
        "description": "Emitted when DevTools is closed."
      },
      {
        "name": "devtools-focused",
        "description": "Emitted when DevTools is focused / opened."
      },
      {
        "name": "certificate-error",
        "description": "Emitted when failed to verify the certificate for url. The usage is the same with the certificate-error event of app.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "URL"
          },
          {
            "name": "error",
            "type": "String",
            "description": "The error code"
          },
          {
            "name": "certificate",
            "type": "Object",
            "properties": [
              {
                "name": "data",
                "type": "Buffer - PEM encoded data"
              },
              {
                "name": "issuerName",
                "type": "String"
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "select-client-certificate",
        "description": "Emitted when a client certificate is requested. The usage is the same with the select-client-certificate event of app.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "URL"
          },
          {
            "name": "certificateList",
            "type": "[Objects]",
            "properties": [
              {
                "name": "data",
                "type": "Buffer - PEM encoded data"
              },
              {
                "name": "issuerName",
                "type": "String - Issuer&apos;s Common Name"
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "login",
        "description": "Emitted when webContents wants to do basic auth. The usage is the same with the login event of app.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "request",
            "type": "Object",
            "properties": [
              {
                "name": "method",
                "type": "String"
              },
              {
                "name": "url",
                "type": "URL"
              },
              {
                "name": "referrer",
                "type": "URL"
              }
            ]
          },
          {
            "name": "authInfo",
            "type": "Object",
            "properties": [
              {
                "name": "isProxy",
                "type": "Boolean"
              },
              {
                "name": "scheme",
                "type": "String"
              },
              {
                "name": "host",
                "type": "String"
              },
              {
                "name": "port",
                "type": "Integer"
              },
              {
                "name": "realm",
                "type": "String"
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function"
          }
        ]
      },
      {
        "name": "found-in-page",
        "description": "Emitted when a result is available for webContents.findInPage request.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "result",
            "type": "Object",
            "properties": [
              {
                "name": "requestId",
                "type": "Integer"
              },
              {
                "name": "finalUpdate",
                "type": "Boolean - Indicates if more responses are to follow."
              },
              {
                "name": "activeMatchOrdinal",
                "type": "Integer (optional) - Position of the active match."
              },
              {
                "name": "matches",
                "type": "Integer (optional) - Number of Matches."
              },
              {
                "name": "selectionArea",
                "type": "Object (optional) - Coordinates of first match region."
              }
            ]
          }
        ]
      },
      {
        "name": "media-started-playing",
        "description": "Emitted when media starts playing."
      },
      {
        "name": "media-paused",
        "description": "Emitted when media is paused or done playing."
      },
      {
        "name": "did-change-theme-color",
        "description": "Emitted when a page's theme color changes. This is usually due to encountering a meta tag:"
      },
      {
        "name": "update-target-url",
        "description": "Emitted when mouse moves over a link or the keyboard moves the focus to a link.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "url",
            "type": "String"
          }
        ]
      },
      {
        "name": "cursor-changed",
        "description": "Emitted when the cursor's type changes. The type parameter can be default, crosshair, pointer, text, wait, help, e-resize, n-resize, ne-resize, nw-resize, s-resize, se-resize, sw-resize, w-resize, ns-resize, ew-resize, nesw-resize, nwse-resize, col-resize, row-resize, m-panning, e-panning, n-panning, ne-panning, nw-panning, s-panning, se-panning, sw-panning, w-panning, move, vertical-text, cell, context-menu, alias, progress, nodrop, copy, none, not-allowed, zoom-in, zoom-out, grab, grabbing, custom. If the type parameter is custom, the image parameter will hold the custom cursor image in a NativeImage, and the scale will hold scaling information for the image.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "type",
            "type": "String"
          },
          {
            "name": "image",
            "type": "NativeImage (optional)"
          },
          {
            "name": "scale",
            "type": "Float (optional)"
          }
        ]
      },
      {
        "name": "context-menu",
        "description": "The mediaFlags is an object with the following properties: The editFlags is an object with the following properties: Emitted when there is a new context menu that needs to be handled.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "params",
            "type": "Object",
            "properties": [
              {
                "name": "x",
                "type": "Integer - x coodinate"
              },
              {
                "name": "y",
                "type": "Integer - y coodinate"
              },
              {
                "name": "linkURL",
                "type": "String - URL of the link that encloses the node the context menu"
              },
              {
                "name": "linkText",
                "type": "String - Text associated with the link. May be an empty"
              },
              {
                "name": "pageURL",
                "type": "String - URL of the top level page that the context menu was"
              },
              {
                "name": "frameURL",
                "type": "String - URL of the subframe that the context menu was invoked"
              },
              {
                "name": "srcURL",
                "type": "String - Source URL for the element that the context menu"
              },
              {
                "name": "mediaType",
                "type": "String - Type of the node the context menu was invoked on. Can"
              },
              {
                "name": "hasImageContent",
                "type": "Boolean - Wether the context menu was invoked on an image"
              },
              {
                "name": "isEditable",
                "type": "Boolean - Wether the context is editable."
              },
              {
                "name": "selectionText",
                "type": "String - Text of the selection that the context menu was"
              },
              {
                "name": "titleText",
                "type": "String - Title or alt text of the selection that the context"
              },
              {
                "name": "misspelledWord",
                "type": "String - The misspelled word under the cursor, if any."
              },
              {
                "name": "frameCharset",
                "type": "String - The character encoding of the frame on which the"
              },
              {
                "name": "inputFieldType",
                "type": "String - If the context menu was invoked on an input"
              },
              {
                "name": "menuSourceType",
                "type": "String - Input source that invoked the context menu."
              },
              {
                "name": "mediaFlags",
                "type": "Object - The flags for the media element the context menu was"
              },
              {
                "name": "editFlags",
                "type": "Object - These flags indicate wether the renderer believes it is"
              }
            ]
          },
          {
            "name": "inError",
            "type": "Boolean",
            "description": "Wether the media element has crashed."
          },
          {
            "name": "isPaused",
            "type": "Boolean",
            "description": "Wether the media element is paused."
          },
          {
            "name": "isMuted",
            "type": "Boolean",
            "description": "Wether the media element is muted."
          },
          {
            "name": "hasAudio",
            "type": "Boolean",
            "description": "Wether the media element has audio."
          },
          {
            "name": "isLooping",
            "type": "Boolean",
            "description": "Wether the media element is looping."
          },
          {
            "name": "isControlsVisible",
            "type": "Boolean",
            "description": "Wether the media element&apos;s controls are"
          },
          {
            "name": "canToggleControls",
            "type": "Boolean",
            "description": "Wether the media element&apos;s controls are"
          },
          {
            "name": "canRotate",
            "type": "Boolean",
            "description": "Wether the media element can be rotated."
          },
          {
            "name": "canUndo",
            "type": "Boolean",
            "description": "Wether the renderer believes it can undo."
          },
          {
            "name": "canRedo",
            "type": "Boolean",
            "description": "Wether the renderer believes it can redo."
          },
          {
            "name": "canCut",
            "type": "Boolean",
            "description": "Wether the renderer believes it can cut."
          },
          {
            "name": "canCopy",
            "type": "Boolean",
            "description": "Wether the renderer believes it can copy"
          },
          {
            "name": "canPaste",
            "type": "Boolean",
            "description": "Wether the renderer believes it can paste."
          },
          {
            "name": "canDelete",
            "type": "Boolean",
            "description": "Wether the renderer believes it can delete."
          },
          {
            "name": "canSelectAll",
            "type": "Boolean",
            "description": "Wether the renderer believes it can select all."
          }
        ]
      },
      {
        "name": "select-bluetooth-device",
        "description": "Emitted when bluetooth device needs to be selected on call to navigator.bluetooth.requestDevice. To use navigator.bluetooth api webBluetooth should be enabled.  If event.preventDefault is not called, first available device will be selected. callback should be called with deviceId to be selected, passing empty string to callback will cancel the request.",
        "returns": [
          {
            "name": "event",
            "type": "Event"
          },
          {
            "name": "devices",
            "type": "[Objects]",
            "properties": [
              {
                "name": "deviceName",
                "type": "String"
              },
              {
                "name": "deviceId",
                "type": "String"
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function",
            "properties": [
              {
                "name": "deviceId",
                "type": "String"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "process",
    "mainProcess": true,
    "slug": "process",
    "websiteUrl": "http://electron.atom.io/docs/api/process",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/process.md",
    "type": "Object",
    "description": "Extensions to process object.",
    "events": [
      {
        "name": "loaded",
        "description": "Emitted when Electron has loaded its internal initialization script and is beginning to load the web page or the main script. It can be used by the preload script to add removed Node global symbols back to the global scope when node integration is turned off:"
      }
    ]
  },
  {
    "name": "desktopCapturer",
    "rendererProcess": true,
    "slug": "desktop-capturer",
    "websiteUrl": "http://electron.atom.io/docs/api/desktop-capturer",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/desktop-capturer.md",
    "type": "Object",
    "description": "List getUserMedia sources for capturing audio, video, and images from a\nmicrophone, camera, or screen."
  },
  {
    "name": "ipcRenderer",
    "rendererProcess": true,
    "slug": "ipc-renderer",
    "websiteUrl": "http://electron.atom.io/docs/api/ipc-renderer",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/ipc-renderer.md",
    "type": "Object",
    "description": "Communicate asynchronously from a renderer process to the main process."
  },
  {
    "name": "remote",
    "rendererProcess": true,
    "slug": "remote",
    "websiteUrl": "http://electron.atom.io/docs/api/remote",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/remote.md",
    "type": "Object",
    "description": "Use main process modules from the renderer process."
  },
  {
    "name": "webFrame",
    "rendererProcess": true,
    "slug": "web-frame",
    "websiteUrl": "http://electron.atom.io/docs/api/web-frame",
    "repoUrl": "https://github.com/electron/electron/blob/v1.2.3/docs/api/web-frame.md",
    "type": "Object",
    "description": "Customize the rendering of the current web page."
  }
]